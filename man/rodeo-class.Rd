% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/class.r
\docType{class}
\name{rodeo-class}
\alias{rodeo}
\alias{rodeo-class}
\title{A reference class to represent an ODE-based model.}
\description{
A reference class to represent an ODE-based model.
}
\section{Fields}{

\describe{
\item{\code{pros}}{A data frame with fields 'name', 'unit', 'description', and
'expression' defining the process rates.}

\item{\code{stoi}}{A data frame with fields 'variable', 'process', and 'expression'
reprenting the stoichiometry matrix in data base format.}

\item{\code{vars}}{A data frame with fields 'name', 'unit', 'description' declaring
the state variables of the model. The declared names become valid
identifiers to be used in the expression fields of \code{pros} or \code{stox}.}

\item{\code{pars}}{A data frame of the same structure as \code{vars} declaring the
parameters of the model. The declared names become valid
identifiers to be used in the expression fields of \code{pros} or \code{stox}.}

\item{\code{funs}}{A data frame of the same structure as \code{vars} declaring any
functions referenced in the expression fields of \code{pros} or \code{stox}.}
}}
\section{Methods}{

\describe{
\item{\code{arrangePars(x, sep = ".", warnUnused = TRUE)}}{Create vector of parameters from list \code{x}. The list elements can
either be vectors (with length according to the number of spatial levels) or
scalars. The latter are recycled for all spatial levels. Element names are
constructed by appending the level index to the original names using the
specified separator. If there is a single level only, element names are
identical to the original names (no suffix).}

\item{\code{arrangeVars(x, sep = ".", warnUnused = TRUE)}}{Create vector of state variables from list \code{x}. The list elements can
either be vectors (with length according to the number of spatial levels) or
scalars. The latter are recycled for all spatial levels. Element names are
constructed by appending the level index to the original names using the
specified separator. If there is a single level only, element names are
identical to the original names (no suffix).}

\item{\code{generate(lang, name = "derivs")}}{Generates code to compute the variables' derivatives with respect
to time. \bold{Arguments:} \code{name}: A string giving the name for the
generated function/routine. \bold{Returns:} The generated code as a string.}

\item{\code{initialize(vars, pars, funs, pros, stoi)}}{Initializes a rodeo object}

\item{\code{plot(values)}}{Creates a plot of the stoichiometry matrix using the supplied values}

\item{\code{stoichiometryMatrix()}}{Builds a stoichiometry matrix from its tabular representation}
}}
\examples{
# Create model object initialized with sample data
data(identifiers, processes, stoichiometry)
model= new("rodeo", vars=subset(identifiers,type=="v"),
  pars=subset(identifiers,type=="p"), funs=subset(identifiers,type=="f"),
  pros=processes, stoi=stoichiometry)

# Display the object's contents (built-in method)
model$show()

# Show stoichiometry information as a matrix
print(model$stoichiometryMatrix())

# Define functions referenced in the model's mathematical expressions
O2sat= function(t) {14.652 - 0.41022*t + 0.007991*t^2 - 0.000077774*t^3}
ka= function(u, d) {(0.728*sqrt(u) - 0.317*u + 0.0372*u^2) / d / 86400}
monod= function(s,h) {s / (s + h)}

# Define parameters and initial values
pars= list(kd=5.78e-7, h_do=0.5, s_do_z=2.76, wind=1, depth=2,
  temp=20, q_in=1, q_ex=1, c_z_in=0.1, c_do_in=9.022)
vars= list(c_z=1, c_do=9.022, v=1.e6)
p= model$arrangePars(pars)
v= model$arrangeVars(vars)

# Graphical representation of the stoichiometry matrix
model$plot(c(v, p))

# Generate code to compute the d/dt of state variables
code= model$generate(name="derivs",lang="r")
derivs= eval(parse(text=code))

# Integrate the model over some time steps
library(deSolve)
t= seq(0, 30*86400, 3600)
out= ode(y=v, times=t, func=derivs, parms=p, NLVL=1)
plot(out)

# Adapt the model to simulate multiple control volumes (boxes) at a time
# For that, at least one variable and at least one parameter must be a vector
nbox= 3
pars= list(kd=rep(5.78e-7, nbox), h_do=0.5, s_do_z=2.76, wind=1, depth=2,
  temp=20, q_in=1, q_ex=1, c_z_in=0.1, c_do_in=9.022)
vars= list(c_z=seq(from=0, to=50, length.out=nbox), c_do=9.022, v=1.e6)
p= model$arrangePars(pars)
v= model$arrangeVars(vars)
out= ode(y=v, times=t, func=derivs, parms=p, NLVL=nbox)
plot(out, which=paste("c_do",1:nbox,sep="."))
}

